#!/usr/bin/perl

use DBI;
use strict;

usage() unless scalar(@ARGV) == 4;

my $newGroupsFile = $ARGV[0];
my $proteinScoresFile = $ARGV[1];
my $repProteinIDsFile = $ARGV[2];
my $planLetter = $ARGV[3];

die "plan_letter arg '$planLetter' must be A or B" unless $planLetter eq 'A' || $planLetter eq 'B';

open(N, $newGroupsFile) || die "Could not open file '$newGroupsFile'\n";
my %proteinNewGroup;

while(<N>) {
  chomp;
  my @a = split;
  my $id = shift @a;
  $id =~ s/\://;
  map { $proteinNewGroup{$_} = $id} @a;
}
close(N);

my %repProteins;
open(R, $repProteinIDsFile) || die "can't open file '$repProteinIDsFile'\n";
while(<R>) {
    chomp;
    $repProteins{$_} = 1;
}

my $dbh = DBI->connect("dbi:Oracle:orth500n", "sfischer", "heathersofia",
		    {PrintError => 0, RaiseError => 1}) or die DBI::errstr;

my $sql = "
insert into apidb.ProteinToPlan${planLetter}GroupId (protein_id, plan_${planLetter}_group_id, score, avg_score, is_rep)
values (?, ?, ?, ?, ?)
";

open(F, $proteinScoresFile) || die "can't open file $proteinScoresFile\n";

my $stmt = $dbh->prepare($sql);
while(<F>) {
    chomp;
    my @a = split;
    my $isRep = 0;
    $isRep = 1 if $repProteins{$a[0]};
    $stmt->execute($a[0], $proteinNewGroup{$a[0]}, $a[1], $a[2], $isRep);
}

sub usage {
die "
 usage: orthomclLoadProteinScores new_groups_file scores_file
";
}

