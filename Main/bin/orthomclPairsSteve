#!/usr/bin/perl

use strict;
use DBI;

my $debug=0;

my $configFile = $ARGV[0];
my $logFile = $ARGV[1];
my $clean = $ARGV[2];
my $restart = $ARGV[3];

my $stepCount = 1;
my @steps = ( # Common
             ['updateMinimumEvalueExponent'],
	     ['bestQueryTaxonScore'],
	     ['qtscore_ix'],
             # Ortholog
	     ['bestHit', ['drop table BestQueryTaxonScore']],
             ['best_hit_ix'],
	     ['ortholog', ['drop table BestHit']],
	     ['orthologTaxon', [ 'drop table OrthologTemp']],
	     ['orthologAvg'],
	     ['orthologAvgIndex'],
	     ['orthologsNormalization', ['drop table OrthologAvgScore', 'drop table OrthologTemp2']],
             # InParalog
	     ['bestInterTaxonScore'],
             ['bis_uids_ix'],
             ['uniqueSimSeqsQueryId'],
             ['ust_qids_ix'],
	     ['betterHit', ['drop table BestInterTaxonScore']],
             ['better_hit_ix'],
	     ['inParalog', ['drop table BetterHit']],
 	     ['inParalogTaxonAvg'],
             ['orthologUniqueId'],
             ['orthologUniqueIdIndex'],
             ['inParalogOrthologTaxonAvg', ['drop table OrthologUniqueId']],
	     ['inParalogAvg',['drop table InParalogTaxonAvg', 'drop table InParalogOrthologTaxonAvg']],
	     ['inParalogAvgIndex'],
	     ['inParalogsNormalization', ['drop table InParalogAvgScore', 'drop table InParalogTemp']],
             # CoOrtholog
	     ['inParalog2Way'],
	     ['in2a_ix'],
	     ['in2b_ix'],
	     ['ortholog2Way'],
	     ['ortholog2WayIndex'],
             ['inParalogOrthologInParalog'],
             ['inParalogOrtholog'],
	     ['coOrthologCandidate', ['drop table Ortholog2Way', 'drop table InParalog2Way', 'drop table InParalogOrthologInParalog', 'drop table InParalogOrtholog']],
	     ['coOrthologNotOrtholog', ['drop table CoOrthologCandidate']],
	     ['coOrtholog', ['drop table CoOrthologNotOrtholog']],
	     ['coOrthologTaxon', [ 'drop table CoOrthologTemp']],
	     ['coOrthologAvg'],
	     ['coOrthologAvgIndex'],
	     ['coOrthologsNormalization', ['drop table CoOrthologAvgScore', 'drop table CoOrthologTaxon']],
	     ['cleanall', ['truncate table InParalog', 'truncate table Ortholog', 'truncate table CoOrtholog']],
	    );

my $stepsHash;
my $cleanHash;
for (my $i=0; $i<scalar(@steps); $i++) {
    $stepsHash->{$steps[$i]->[0]} = $i+1;
    $cleanHash->{$steps[$i]->[0]} = $steps[$i]->[1] if $steps[$i]->[1];
}

open (LOGFILE, ">>$logFile") || die "Can't open log file '$logFile'\n";
my $oldfh = select(LOGFILE); $| = 1; select($oldfh);  # flush print buffer



print LOGFILE "\n\n============================================================================================\n";
print LOGFILE localtime(). " orthomclPairs " . join(' ', @ARGV) . "\n";
print LOGFILE "=============================================================================================\n\n";

&usage() unless $configFile;
&usage() unless $logFile;
usage() unless $clean =~ /cleanup=(yes|no|only|all)/;

$clean = $1;

my $skipPast;
if ($restart) {
  usage() unless $restart =~ /startAfter=(.*)/;
  $skipPast = $stepsHash->{$1};
  die "invalid restart arg $restart" unless $skipPast;
}

my $config = parseConfigFile($configFile);
my $sst = getConfig("similarSequencesTable");

my $oracleNoLogging;

if (getConfig("dbVendor") eq 'oracle') {
  require DBD::Oracle;
  $oracleNoLogging = " NOLOGGING";
} else {
  require DBD::mysql;
}

my $dbh = DBI->connect(getConfig("dbConnectString"), getConfig("dbLogin"),
		       getConfig("dbPassword")) or die DBI::errstr;


commonTempTables();

inparalogs();

orthologs();

normalizeInParalogs();

coorthologs();

cleanall() if $clean eq 'all';

############################################################################

sub parseConfigFile {
  my ($configFile) = @_;

  open(F, $configFile) || die "Can't open config file '$configFile'\n";

  my $config;
  while(<F>) {
    chomp;
    next if /^\#/;
    /^(\w+)\=(.+)/ || die "illegal line in config file '$_'\n";
    my $key=$1;
    my $val=$2;
    $config->{$key} = $val;
    $val = '********' if $key eq 'dbPassword';
    print LOGFILE localtime() . " configuration: $key=$val\n";
  }
  return $config;
}

################################################################################
############################### Common tables  #################################
################################################################################
sub commonTempTables {
  print LOGFILE localtime() . " Constructing common temp tables\n"
    unless $clean eq 'only' || $clean eq 'all';

  my $interTaxonMatch = getConfig("interTaxonMatchView");

  # a little bit of a hack here.  mysql can't tolerate finding the
  # minEvalueExp in the sql that updates the table
  # so, we do it as a preprocess.
  # must explicitly avoid the preprocess if just cleaning or if skipping
  my $sql = "
select min(evalue_exp)
from $sst
where evalue_mant != 0
";
  my $minEvalueExp;
  if ($clean ne 'only' && $clean ne 'all' && !$skipPast) {
      print LOGFILE localtime() . "   Find min evalue exp  (OrthoMCL-DB V2 took ??? for this step)\n";
      my $stmt = $dbh->prepare("$sql") or die DBI::errstr;
      $stmt->execute() or die DBI::errstr;
      ($minEvalueExp) = $stmt->fetchrow_array();
      print LOGFILE localtime() . "   done\n";
  }

  $sql = "
update $sst
set evalue_exp = ${minEvalueExp}-1
where evalue_exp = 0
";
  runSql($sql, "updating $sst, setting 0 evalue_exp to underflow value (${minEvalueExp} - 1)",
	 'updateMinimumEvalueExponent', '23 min');

  ##########################################################################

  $sql = "
create table BestQueryTaxonScore $oracleNoLogging as
select im.query_id, im.subject_taxon_id, low_exp.evalue_exp, min(im.evalue_mant) as evalue_mant
from $interTaxonMatch im,
     (select query_id, subject_taxon_id, min(evalue_exp) as evalue_exp
      from $interTaxonMatch
      group by query_id, subject_taxon_id) low_exp
where im.query_id = low_exp.query_id
  and im.subject_taxon_id = low_exp.subject_taxon_id
  and im.evalue_exp = low_exp.evalue_exp
group by im.query_id, im.subject_taxon_id, low_exp.evalue_exp
";
  
  runSql($sql, "create BestQueryTaxonScore", 'bestQueryTaxonScore', '1.5 hours');

  ################################################################################

  $sql = "
create index qtscore_ix on BestQueryTaxonScore(query_id, subject_taxon_id, evalue_exp, evalue_mant)
";
  
  runSql($sql, "create qtscore_ix index on BestQueryTaxonScore", 'qtscore_ix', '3 min'); 
}


################################################################################
############################### Orthologs  #####################################
################################################################################
sub orthologs {
  print LOGFILE localtime() . " Constructing ortholog tables\n"
    unless $clean eq 'only' || $clean eq 'all';

  my $evalueExpThreshold = getConfig("evalueExponentCutoff");
  my $percentMatchThreshold = getConfig("percentMatchCutoff");

  my $sql = "
create table BestHit $oracleNoLogging as
select s.query_id, s.subject_id,
       s.query_taxon_id, s.subject_taxon_id,
       s.evalue_exp, s.evalue_mant
from $sst s, BestQueryTaxonScore cutoff
where s.query_id = cutoff.query_id
  and s.subject_taxon_id = cutoff.subject_taxon_id
  and s.query_taxon_id != s.subject_taxon_id
  and s.evalue_exp <= $evalueExpThreshold
  and s.percent_match >= $percentMatchThreshold
  and (s.evalue_mant < 0.01
       or s.evalue_exp = cutoff.evalue_exp
          and s.evalue_mant = cutoff.evalue_mant)
";
  
  runSql($sql, "create BestHit", 'bestHit', '45 min');

  ######################################################################

  $sql = "
create index best_hit_ix on BestHit(query_id,subject_id)
";

  runSql($sql, "create best_hit_ix index on BestHit", 'best_hit_ix', '3 min');

  ######################################################################

  $sql = "
create table OrthologTemp $oracleNoLogging as
select bh1.query_id as sequence_id_a, bh1.subject_id as sequence_id_b,
       bh1.query_taxon_id as taxon_id_a, bh1.subject_taxon_id as taxon_id_b,
       case -- don't try to calculate log(0) -- use rigged exponents of SimSeq
         when bh1.evalue_mant < 0.01 or bh2.evalue_mant < 0.01
           then (bh1.evalue_exp + bh2.evalue_exp) / -2
         else  -- score = ( -log10(evalue1) - log10(evalue2) ) / 2
           (log(10, bh1.evalue_mant * bh2.evalue_mant)
            + bh1.evalue_exp + bh2.evalue_exp) / -2
       end as unnormalized_score
from BestHit bh1, BestHit bh2
where bh1.query_id < bh1.subject_id
  and bh1.query_id = bh2.subject_id
  and bh1.subject_id = bh2.query_id
";
    
  runSql($sql, "create OrthologTemp table", 'ortholog', '10 min');

  ######################################################################

  orthologTaxonSub('');

  ######################################################################

  normalizeOrthologsSub('', getConfig("orthologTable"));
}


################################################################################
############################### InParalogs  ####################################
################################################################################
sub inparalogs {
  print LOGFILE localtime() . " Constructing inParalog tables\n"
    unless $clean eq 'only' || $clean eq 'all';

  my $inParalogTable = getConfig("inParalogTable");
  my $orthologTable = getConfig("orthologTable");
  my $evalueExpThreshold = getConfig("evalueExponentCutoff");
  my $percentMatchThreshold = getConfig("percentMatchCutoff");

  my $sql = "
create table BestInterTaxonScore $oracleNoLogging as
select im.query_id, low_exp.evalue_exp, min(im.evalue_mant) as evalue_mant
from BestQueryTaxonScore im,
     (select query_id, min(evalue_exp) as evalue_exp
      from BestQueryTaxonScore
      group by query_id) low_exp
where im.query_id = low_exp.query_id
  and im.evalue_exp = low_exp.evalue_exp
group by im.query_id, low_exp.evalue_exp
";

  runSql($sql, "create BestInterTaxonScore", 'bestInterTaxonScore', '2 min');

  ###########################################################################

  $sql = "
create index bis_uids_ix on BestInterTaxonScore(query_id)
";

  runSql($sql, "create bis_uids_ix index on BestQueryTaxonScore", 'bis_uids_ix', '3 min');

  ###########################################################################

   $sql = "
create table UniqueSimSeqsQueryId $oracleNoLogging as
select distinct query_id from SimilarSequences
";

  runSql($sql, "create UniqueSimSeqsQueryId", 'uniqueSimSeqsQueryId', '3 secs');

  ###########################################################################

  $sql = "
create index ust_qids_ix on UniqueSimSeqsQueryId(query_id)
";

  runSql($sql, "create ust_qids_ix index on UniqueSimSeqsQueryId", 'ust_qids_ix', '3 min');


  ###########################################################################

  $sql = "
create table BetterHit $oracleNoLogging as
select s.query_id, s.subject_id,
       s.query_taxon_id as taxon_id,
       s.evalue_exp, s.evalue_mant
from $sst s, BestInterTaxonScore bis
where s.query_id != s.subject_id
  and s.query_taxon_id = s.subject_taxon_id
  and s.query_id = bis.query_id
  and s.evalue_exp <= $evalueExpThreshold
  and s.percent_match >= $percentMatchThreshold
  and (s.evalue_mant < 0.001
       or s.evalue_exp < bis.evalue_exp
       or (s.evalue_exp = bis.evalue_exp and s.evalue_mant <= bis.evalue_mant))
-- . . . or Similarity for a protein with no BestInterTaxonScore
--       (i.e. an intrataxon match for a protein with no intertaxon
--        match in the database)
union
select s.query_id, s.subject_id, s.query_taxon_id as taxon_id, s.evalue_exp, s.evalue_mant
from $sst s
where s.query_taxon_id = s.subject_taxon_id
  and s.evalue_exp <= $evalueExpThreshold
  and s.percent_match >= $percentMatchThreshold
  and s.query_id in 
     (SELECT distinct ust.query_id
      from UniqueSimSeqsQueryId ust
      LEFT OUTER JOIN BestInterTaxonScore bis ON bis.query_id = ust.query_id
      WHERE bis.query_id IS NULL)
";
  
  runSql($sql, "create BetterHit table", 'betterHit', '30 min');

  ###########################################################################
  
  $sql = "
create index better_hit_ix on BetterHit(query_id,subject_id)
";

  runSql($sql, "create better_hit_ix index on BetterHit", 'better_hit_ix', '3 min');

  ###########################################################################

  $sql = "
create table InParalogTemp $oracleNoLogging as
select bh1.query_id as sequence_id_a, bh1.subject_id as sequence_id_b,
       bh1.taxon_id,
       case -- don't try to calculate log(0) -- use rigged exponents of SimSeq
         when bh1.evalue_mant < 0.01 or bh2.evalue_mant < 0.01
           then (bh1.evalue_exp + bh2.evalue_exp) / -2
         else  -- score = ( -log10(evalue1) - log10(evalue2) ) / 2
           (log(10, bh1.evalue_mant * bh2.evalue_mant)
            + bh1.evalue_exp + bh2.evalue_exp) / -2
       end as unnormalized_score
from BetterHit bh1, BetterHit bh2
where bh1.query_id < bh1.subject_id
  and bh1.query_id = bh2.subject_id
  and bh1.subject_id = bh2.query_id
";

   runSql($sql, "create InParalogTemp table", 'inParalog', '5 min');

  ################################################################

  $sql = "
create table InParalogTaxonAvg $oracleNoLogging as
select avg(i.unnormalized_score) average, i.taxon_id
from InParalogTemp i
group by i.taxon_id
";

  runSql($sql, "create InParalogTaxonAvg table", 'inParalogTaxonAvg', '5 min');

  ################################################################

  $sql = "
create table OrthologUniqueId $oracleNoLogging as
select distinct(sequence_id) from (
select sequence_id_a as sequence_id from $orthologTable
union
select sequence_id_b as sequence_id from $orthologTable) i
";

  runSql($sql, "create OrthologUniqueId table", 'orthologUniqueId', '5 min');

  ################################################################

  $sql = "create unique index ortholog_unique_id_ix on OrthologUniqueId(sequence_id)";


  runSql($sql, "create unique ortholog_unique_id_ix index", 'orthologUniqueIdIndex', '1 min');

  ################################################################

  $sql = "
create table InParalogOrthologTaxonAvg $oracleNoLogging as

 select avg(i.unnormalized_score) average, i.taxon_id
         from InParalogTemp i
         where i.sequence_id_a in
                 (select sequence_id from OrthologUniqueId)
            or i.sequence_id_b in
                 (select sequence_id from OrthologUniqueId)
         group by i.taxon_id
";

  runSql($sql, "create InParalogOrthologTaxonAvg table", 'inParalogOrthologTaxonAvg', '5 min');

  ################################################################

  $sql = "
create table InParalogAvgScore $oracleNoLogging as
     select case
            when orth_i.average is NULL
              then all_i.average
              else orth_i.average
            end as avg_score,
            all_i.taxon_id
       from InParalogTaxonAvg all_i LEFT OUTER JOIN InParalogOrthologTaxonAvg orth_i
       ON all_i.taxon_id = orth_i.taxon_id
";

   runSql($sql, "create InParalogAvgScore table", 'inParalogAvg', '1 min');

  ################################################################

  $sql = "create index inparalog_avg_ix on InParalogAvgScore(taxon_id,avg_score)";


  runSql($sql, "create InParalogAvgScore index", 'inParalogAvgIndex', '1 min');

  ################################################################

  $sql = "
  insert into $inParalogTable (sequence_id_a, sequence_id_b, taxon_id, unnormalized_score, normalized_score)
  select it.sequence_id_a, it.sequence_id_b, it.taxon_id, it.unnormalized_score, it.unnormalized_score/a.avg_score
  from InParalogTemp it, InParalogAvgScore a
  where it.taxon_id = a.taxon_id
";

  runSql($sql, "populate $inParalogTable table, including normalized_score", 'inParalogsNormalization', '0');

  ################################################################
}

################################################################################
############################### CoOrthologs  ###################################
################################################################################
sub coorthologs {
  print LOGFILE localtime() . " Constructing coOrtholog tables\n"
    unless $clean eq 'only' || $clean eq 'all';

  my $inParalogTable = getConfig("inParalogTable");
  my $orthologTable = getConfig("orthologTable");
  my $coOrthologTable = getConfig("coOrthologTable");
  my $evalueExpThreshold = getConfig("evalueExponentCutoff");
  my $percentMatchThreshold = getConfig("percentMatchCutoff");

  my $sql = "
create table InParalog2Way $oracleNoLogging as
select sequence_id_a, sequence_id_b from $inParalogTable
union
select sequence_id_b as sequence_id_a, sequence_id_a as sequence_id_b from $inParalogTable
";
  
    runSql($sql, "create InParalog2Way", 'inParalog2Way', '1.5 hours');

  ######################################################################

  $sql = "
create index in2a_ix on InParalog2Way(sequence_id_a, sequence_id_b)
";
  
  runSql($sql, "index in2a_ix", 'in2a_ix', '1.5 hours');

  ######################################################################

  $sql = "
create index in2b_ix on InParalog2Way(sequence_id_b, sequence_id_a)
";
  
  runSql($sql, "index in2b_ix", 'in2b_ix', '1.5 hours');

  ######################################################################

  $sql = "
create table Ortholog2Way $oracleNoLogging as
-- symmetric closure of Ortholog
select sequence_id_a, sequence_id_b from $orthologTable
union
select sequence_id_b as sequence_id_a, sequence_id_a as sequence_id_b from $orthologTable
";
  
   runSql($sql, "create Ortholog2Way", 'ortholog2Way', '1.5 hours');

  ######################################################################

  $sql = "
create index ortholog2way_ix on Ortholog2Way(sequence_id_a, sequence_id_b)
";

  runSql($sql, "index ortholog2way_ix", 'ortholog2WayIndex', '1.5 hours');

  ######################################################################

  $sql = "
create table InParalogOrthologInParalog $oracleNoLogging as
      select ip1.sequence_id_a, ip2.sequence_id_b
      from InParalog2Way ip1, Ortholog2Way o, InParalog2Way ip2
      where ip1.sequence_id_b = o.sequence_id_a
        and o.sequence_id_b = ip2.sequence_id_a
";
  
   runSql($sql, "create InParalogOrthologInParalog", 'inParalogOrthologInParalog', '10 min');

  ##################################################################

  $sql = "
create table InParalogOrtholog $oracleNoLogging as
      select ip.sequence_id_a, o.sequence_id_b
      from InParalog2Way ip, Ortholog2Way o
      where ip.sequence_id_b = o.sequence_id_a
";
  
   runSql($sql, "create InParalogOrtholog", 'inParalogOrtholog', '10 min');

  ##################################################################

  $sql = "
create table CoOrthologCandidate $oracleNoLogging as
select distinct
       least(sequence_id_a, sequence_id_b) as sequence_id_a,
       greatest(sequence_id_a, sequence_id_b) as sequence_id_b
from (select sequence_id_a, sequence_id_b from InParalogOrthologInParalog
      union
      select sequence_id_a, sequence_id_b from InParalogOrtholog) t
";
  
   runSql($sql, "create CoOrthologCandidate", 'coOrthologCandidate', '10 min');

  ######################################################################

  $sql = "
create table CoOrthologNotOrtholog $oracleNoLogging as
SELECT cc.sequence_id_a, cc.sequence_id_b
      FROM CoOrthologCandidate cc
      LEFT OUTER JOIN $orthologTable o
      ON cc.sequence_id_a = o.sequence_id_a
      AND cc.sequence_id_b = o.sequence_id_b
      WHERE o.sequence_id_a IS NULL
";

   runSql($sql, "create CoOrthologNotOrtholog table", 'coOrthologNotOrtholog', '30 min');

  ##########################################################

  $sql = "
create table CoOrthologTemp $oracleNoLogging as
select /*+ use_nl(candidate, ab) use_nl(candidate, ba)  */
       candidate.sequence_id_a, candidate.sequence_id_b,
       ab.query_taxon_id as taxon_id_a, ab.subject_taxon_id as taxon_id_b,
       case  -- in case of 0 evalue, use rigged exponent
         when ab.evalue_mant < 0.00001 or ba.evalue_mant < 0.00001
           then (ab.evalue_exp + ba.evalue_exp) / -2
         else -- score = ( -log10(evalue1) - log10(evalue2) ) / 2
           (log(10, ab.evalue_mant * ba.evalue_mant)
            + ab.evalue_exp + ba.evalue_exp) / -2
       end as unnormalized_score
from $sst ab, $sst ba, CoOrthologNotOrtholog candidate
where ab.query_id = candidate.sequence_id_a
  and ab.subject_id = candidate.sequence_id_b
  and ab.evalue_exp <= $evalueExpThreshold
  and ab.percent_match >= $percentMatchThreshold
  and ba.query_id = candidate.sequence_id_b
  and ba.subject_id = candidate.sequence_id_a
  and ba.evalue_exp <= $evalueExpThreshold
  and ba.percent_match >= $percentMatchThreshold
";

  runSql($sql, "create CoOrthologTemp table", 'coOrtholog', '30 min');

  ######################################################################

  orthologTaxonSub('co');

  ######################################################################

  normalizeOrthologsSub("Co", getConfig("coOrthologTable"));
}


sub orthologTaxonSub {
  my ($co) = @_;

  my $coCaps = $co? "Co" : "";
  $co = $co? "coO" : "o";

my $sql = "create table ${coCaps}OrthologTaxon $oracleNoLogging as
select case
         when taxon_id_a < taxon_id_b
         then taxon_id_a
         else taxon_id_b
        end as smaller_tax_id,
        case
          when taxon_id_a < taxon_id_b
          then taxon_id_b
          else taxon_id_a
        end as bigger_tax_id,
        unnormalized_score
      from ${coCaps}OrthologTemp";

  runSql($sql, "create ${coCaps}OrthologTaxon table", "${co}rthologTaxon", '10 min');
}

sub normalizeOrthologsSub {
  my ($co, $orthologTable) = @_;

  my $coCaps = $co? "Co" : "";
  $co = $co? "coO" : "o";

  my $sql = "
create table ${coCaps}OrthologAvgScore $oracleNoLogging as
select smaller_tax_id, bigger_tax_id, avg(unnormalized_score) avg_score
from ${coCaps}OrthologTaxon
group by smaller_tax_id, bigger_tax_id
"; 

  runSql($sql, "create ${coCaps}OrthologAvgScore table", "${co}rthologAvg", '1 min');

  ################################################################
  
  $sql = "create index ${co}orthoAvg_ix on ${coCaps}OrthologAvgScore(smaller_tax_id,bigger_tax_id,avg_score)";
  
  runSql($sql, "create ${coCaps}OrthologAvgScore index", "${co}rthologAvgIndex", '1 min');

  ################################################################

  $sql = "
  insert into $orthologTable (sequence_id_a, sequence_id_b, taxon_id_a, taxon_id_b, unnormalized_score, normalized_score)
  select ot.sequence_id_a, ot.sequence_id_b, ot.taxon_id_a, ot.taxon_id_b, ot.unnormalized_score, ot.unnormalized_score/a.avg_score
  from ${coCaps}OrthologTemp ot, ${coCaps}OrthologAvgScore a
where least(ot.taxon_id_a, ot.taxon_id_b) = a.smaller_tax_id
    and greatest(ot.taxon_id_a, ot.taxon_id_b) = a.bigger_tax_id
";
  
  runSql($sql, "populate $orthologTable table, including normalized_score", "${co}rthologsNormalization", '0');
}

sub normalizeInParalogs {

}

sub runSql {
  my ($sql, $msg, $tag, $sampleTime) = @_;

  print LOGFILE "$sql\n\n" if $debug;

  my $stepNumber = $stepsHash->{$tag};
  die "invalid tag '$tag'" unless $stepNumber;

  if ($skipPast >= $stepNumber) {
    print LOGFILE "... skipping '$tag'...\n\n";
    return;
  }

  if ($clean ne 'only' && $clean ne 'all') {
      my $t = time();

      print LOGFILE localtime() . "   $msg  (OrthoMCL-DB V2 took $sampleTime for this step)\n";

      my $stmt = $dbh->prepare($sql) or die DBI::errstr;
      $stmt->execute() or die DBI::errstr;

      my $tt = time() - $t;
      my $hours = int($tt / 3600);
      my $mins = int($tt / 60) % 60;
      if ($hours == 0 && $mins == 0) {$mins = 1};
      my $hoursStr = $hours? "$hours hours and " : "";
      print LOGFILE localtime() . "   step '$tag' done ($hoursStr$mins mins)\n\n";
  }

  clean($tag) unless ($clean eq 'no');
}

sub clean {
  my ($tag) = @_;

  my $orthologTable = getConfig("orthologTable");
  my $coOrthologTable = getConfig("coOrthologTable");
  my $inParalogTable = getConfig("inParalogTable");

  my $sqlPrefix = getConfig("dbVendor") eq 'oracle'?
    'select * from all_tables where table_name' :
      'select * from all_tables where table_name';

  my $cleanSqls = $cleanHash->{$tag};
  foreach my $cleanSql (@$cleanSqls) {
    if ($cleanSql) {
      $cleanSql =~ /(\w+) table (\w+)/i || die "invalid clean sql '$cleanSql'";
      my $action = $1;
      my $table = uc($2);  # NOT COMPATIBLE WITH MYSQL!!!
      $table = uc($orthologTable) if $table eq 'Ortholog';
      $table = uc($coOrthologTable) if $table eq 'CoOrtholog';
      $table = uc($inParalogTable) if $table eq 'InParalog';
      if ($action eq 'drop') {
	my $stmt = $dbh->prepare("$sqlPrefix = '$table'" ) or die DBI::errstr;
	$stmt->execute() or die DBI::errstr;
	return unless $stmt->fetchrow();
      }
      my $stmt = $dbh->prepare($cleanSql) or die DBI::errstr;
      print LOGFILE localtime() . "   cleaning: $cleanSql\n";
      $stmt->execute() or die DBI::errstr;
      print LOGFILE localtime() . "   done\n";
    }
  }
}

sub cleanall {
    foreach my $tag (keys (%$cleanHash)) {
	clean($tag);
    }
}

sub getConfig {
  my ($prop) = @_;
  die "can't find property $prop in config file" unless $config->{$prop};
  return $config->{$prop};
}

sub usage {
  my $stepsString;
  map { $stepsString .= "  $_->[0]\n" } @steps;

  print "
Find pairs for OrthoMCL.

usage: orthomclPairs config_file log_file cleanup=[yes|no|only|all] <startAfter=TAG>

where:
  config_file : see below
  cleanup     : clean up temp tables? 
                   yes=clean as we go; 
                   no=don't clean as we go; 
                   only=just clean, do nothing else; 
                   all=just clean, plus clean InParalog, Ortholog and CoOrtholog tables.
  startAfter  : optionally start after a previously completed step. see below for TAGs

Database Input:
  - SimilarSequences table containing all-v-all BLAST hits
  - InParalog, Ortholog, CoOrtholog tables - created but empty

Database Output:
  - Populated InParalog, Ortholog and CoOrtholog tables

Standard Error:
  - logging info

NOTE: the database login in the config file must have update/insert/truncate privileges on the tables specified in the config file.

Sample Config File:

dbVendor=oracle  (or mysql)
dbConnectString=dbi:Oracle:orthomcl
dbLogin=my_db_login
dbPassword=my_db_password
similarSequencesTable=SimilarSequences
orthologTable=Ortholog
inParalogTable=InParalog
coOrthologTable=CoOrtholog
interTaxonMatchView=InterTaxonMatch
percentMatchCutoff=50
evalueExponentCutoff=-5

Names of TAGs to use in startAfter (look in log file to see last one run)
$stepsString
";
  exit(1);
}

