#!/usr/bin/perl

use strict;

&usage() unless scalar(@ARGV) == 3;

my $groupsFile = $ARGV[0];
my $refGroupsFile = $ARGV[1];
my $outputDir = $ARGV[2];

my $EXACT = 0;
my $ADD_SING = 1;
my $REMOVE_SING = 2;
my $ADD_REMOVE_SING = 3;

open(F, $refGroupsFile) || die "Can't open ref groups file '$refGroupsFile'\n";

my %refProtein2refGroupId;
my %refGroupId2refProteins;
while(<REF>) {
  chomp;
  my @a = split(/\s/);
  my $groupId = shift(@a);
  map { $refProtein2refGroupId{$_} = $groupId;} @a;
  $refGroupId2refProteins{$groupId} = \@a;
}
close(REF);

mkdir("$outputDir/one") || die "Can't mkdir $outputDir/one\n" unless -d "$outputDir/one";
mkdir("$outputDir/two") || die "Can't mkdir $outputDir/two\n" unless -d "$outputDir/two";

open(GRP, $groupsFile) || die "Can't open groups file '$groupsFile'\n";
open(NONE, ">$outputDir/none") || die "Can't open file $outputDir/none for writing\n"
open(EXACT, ">$outputDir/one/exact") || die "Can't open file $outputDir/one/exact for writing\n"
open(ADD_SING, ">$outputDir/one/add") || die "Can't open file $outputDir/one/add for writing\n"
open(REMOVE_SING, ">$outputDir/one/remove") || die "Can't open file $outputDir/one/remove for writing\n"
open(ADD_REMOVE_SING, ">$outputDir/one/add_remove") || die "Can't open file $outputDir/one/add_remove for writing\n"
open(TWO_EXACT, ">$outputDir/two/exact") || die "Can't open file $outputDir/two/exact for writing\n"
open(TWO_ADD_SING, ">$outputDir/two/add") || die "Can't open file $outputDir/two/add for writing\n"
open(TWO_REMOVE_SING, ">$outputDir/two/remove") || die "Can't open file $outputDir/two/remove for writing\n"
open(TWO_ADD_REMOVE_SING, ">$outputDir/two/add_remove") || die "Can't open file $outputDir/two/add_remove for writing\n"
while(<GRP>) {
  chomp;
  my @a = split(/\s/);
  my $groupId = shift(@a);
  my $groupSize = scalar(@a);
  my %matchedRefGroups;
  foreach my $member (@a) {
    my $refGroupId = $refProtein2groupId{$member};
    push(@{$matchedRefGroups{$refGroupId}}, $member);
  }
  # matched no group
  if (scalar(keys(%matchedRefGroups)) == 0) {
    print NONE "$_\n";
  }

  # matched one group
  if (scalar(keys(%matchedRefGroups)) == 1) {
    my ($refGroupId) = keys(%matchedRefGroups);
    my $refGroupSize = scalar(@{$refGroupId2refProteins{$refGroupId}});
    my @matchedMembers = @{%matchedRefGroups{$refGroupId}};

    my $class = classify($groupSize, $regGroupSize, \@matchedMembers);
    print EXACT "$groupId $refGroupId" if $class == $EXACT;
    print REMOVE_SING "$groupId $refGroupId" if $class == $REMOVE_SING;
    print ADD_SING "$groupId $refGroupId" if $class == $ADD_SING;
    print ADD_REMOVE_SING "$groupId $refGroupId" if $class == $ADD_REMOVE_SING;
  }

  # matched two groups
  # union the two and classify as one
  if (scalar(keys(%matchedRefGroups)) == 2) {
    my ($refGroupId1, $refGroupId2) = keys(%matchedRefGroups);
    my $refGroupSize = scalar(@{$refGroupId2refProteins{$refGroupId1}}) + scalar(@{$refGroupId2refProteins{$refGroupId2}});
    my @matchedMembers = (@{%matchedRefGroups{$refGroupId1}}, @{%matchedRefGroups{$refGroupId2}});

    my $class = classify($groupSize, $regGroupSize, \@matchedMembers);
    print TWO_EXACT "$groupId $refGroupId1 $refGroupId2" if $class == $EXACT;
    print TWO_REMOVE_SING "$groupId $refGroupId1 $refGroupId2" if $class == $REMOVE_SING;
    print TWO_ADD_SING "$groupId $refGroupId1 $refGroupId2" if $class == $ADD_SING;
    print TWO_ADD_REMOVE_SING "$groupId $refGroupId1 $refGroupId2" if $class == $ADD_REMOVE_SING;

  }
}

sub classify {
  my ($groupSize, $refGroupSize, $matchedMembers) = @_;
  # exact match
  if ($groupSize == $refGroupSize && $groupSize == scalar(@$matchedMembers)) {
    return $EXACT;
  }

  # removes singletons
  elsif ($groupSize < $refGroupSize && $groupSize == scalar(@$matchedMembers)) {
    return $REMOVE_SING;
  }

  # adds singletons
  elsif ($groupSize > $refGroupSize && $refGroupSize == scalar(@$matchedMembers)) {
    return $ADD_SING;
  }

  # adds and removes singletons
  else {
    return $ADD_REMOVE_SING;
  }
}

sub usage {

die "
Compare a new groups file with a reference groups file.

Divides the groups file into four files, those with groups that are:
  1) matches no reference group
  2) exactly matches a reference group
  2) is contained by a single reference group (ie, removes singletons)
  3) contains a single reference group (ie, adds singletons)
  4) contains a single partial reference group (ie, lost members, adds singletons)
  5) merges two groups
  6) matched no group
  4) the rest

Assigns a new group to a reference group by finding the ref group that has the most
members of the new group.

Usage: orthomclCompareGroupsFiles groups_file reference_groups_file output_dir

";

}
