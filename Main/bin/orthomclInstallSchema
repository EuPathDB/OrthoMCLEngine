#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use DBI;
use OrthoMCLEngine::Main::Base;
use Getopt::Long;
use Carp;
use strict;

$|=1;


usage() unless (@ARGV >= 1);

my $reset = '';
GetOptions ('reset!' => \$reset);

my $do_drop_tables = 0;

if ($reset) { 
  print "'--reset' will cause deletion of any existing data in the database.\n";
  print "Do you want to continue? Y/N :";
  my $ans = <STDIN>;
  if ($ans !~ m/^y|Y$/) {
    print "quitting\n";
    exit 1;
  }
  print "\n";
  $do_drop_tables = 1;
}


my $configFile = $ARGV[0];
my $sqlLog = $ARGV[1];

my $base = OrthoMCLEngine::Main::Base->new($configFile);

startBuiltInMysql($base->getConfig('dbConnectString'));

my $dbh = $base->getDbh();

if ($sqlLog) {
  open (LOGFILE, ">$sqlLog");
}

my $dbVendor;
my $intType = ($dbVendor eq 'oracle') ? 'NUMBER' : 'INT';
my $oracleNoLogging = $base->getConfig("dbVendor") eq 'oracle'? " NOLOGGING" : "";
my $oracleIndexTblSpc = $base->getConfig("dbVendor") eq 'oracle'? 
    $base->getConfig("oracleIndexTblSpc") : "";
$oracleIndexTblSpc =~ s/\s//g;

($do_drop_tables == 1) && dropBaseTables();

createSimilarSequencesTable();
createInParalogTable();
createOrthologTable();
createCoOrthologTable();
createInterTaxonMatchView();
stopBuiltInMysql($base->getConfig('dbConnectString'));
##############################################################

sub dropBaseTables {
    my @baseViews = (
        $base->getConfig("interTaxonMatchView"),
    );
    
    my @baseTables = (
        $base->getConfig("similarSequencesTable"),
        $base->getConfig("inParalogTable"),
        $base->getConfig("orthologTable"),
        $base->getConfig("coOrthologTable"),
    );
    
    my @indexes = (
         { 'ortholog_seq_a_ix' => $base->getConfig("orthologTable") },
         { 'ortholog_seq_b_ix' => $base->getConfig("orthologTable") },
    );

    for my $view (@baseViews) {
        warn "Dropping $view\n";
        eval { local $SIG{'__WARN__'} = \&missingOK; runSql("DROP VIEW $view"); }
    }
    
    for my $table (@baseTables) {
        warn "Dropping $table\n";
        eval { local $SIG{'__WARN__'} = \&missingOK; runSql("DROP TABLE $table"); }
    }
    
    for my $idx_tbl (@indexes) {
        my ($index) = keys %$idx_tbl;
        my $table = $idx_tbl->{$index};
        warn "Dropping $index on $table\n";
        eval { local $SIG{'__WARN__'} = \&missingOK; runSql("DROP INDEX $index on $table"); }
    }
    
}

sub createSimilarSequencesTable {
  my $sst = $base->getConfig("similarSequencesTable");

  my $sql = "
CREATE TABLE $sst $oracleNoLogging (
 QUERY_ID                 VARCHAR(40),
 SUBJECT_ID               VARCHAR(40),
 QUERY_TAXON_ID           VARCHAR(40),
 SUBJECT_TAXON_ID         VARCHAR(40),
 EVALUE_MANT              FLOAT, 
 EVALUE_EXP               $intType,
 PERCENT_IDENTITY         FLOAT,
 PERCENT_MATCH            FLOAT
)
";
  runSql($sql);

  $sql = "
CREATE UNIQUE INDEX ss_qtaxexp_ix $oracleNoLogging
ON $sst(query_id, subject_taxon_id,
evalue_exp, evalue_mant,
query_taxon_id, subject_id)
";
  runSql($sql);

  $sql = "
CREATE UNIQUE INDEX ss_seqs_ix $oracleNoLogging
ON $sst(query_id, subject_id,
evalue_exp, evalue_mant, percent_match)
";
  runSql($sql);
}


sub createInParalogTable {
 my $ipt = $base->getConfig("inParalogTable");
 my $sql = "
CREATE TABLE $ipt $oracleNoLogging (
 SEQUENCE_ID_A           VARCHAR(40),
 SEQUENCE_ID_B           VARCHAR(40),
 TAXON_ID                VARCHAR(40),
 UNNORMALIZED_SCORE      FLOAT,
 NORMALIZED_SCORE        FLOAT
)
";
  runSql($sql);
}


sub createOrthologTable  {
 my $olt = $base->getConfig("orthologTable");
 my $sql = " 
CREATE TABLE $olt $oracleNoLogging (
 SEQUENCE_ID_A           VARCHAR(40),
 SEQUENCE_ID_B           VARCHAR(40),
 TAXON_ID_A              VARCHAR(40),
 TAXON_ID_B              VARCHAR(40),
 UNNORMALIZED_SCORE      FLOAT,
 NORMALIZED_SCORE        FLOAT
)
";
  runSql($sql);

$sql = "
CREATE INDEX ortholog_seq_a_ix  $oracleNoLogging
ON $olt(sequence_id_a)
";
  runSql($sql);

$sql = "
CREATE INDEX ortholog_seq_b_ix $oracleNoLogging
ON $olt(sequence_id_b)
";
  runSql($sql);
}


sub createCoOrthologTable  {
 my $cot = $base->getConfig("coOrthologTable");
 my $sql = "
CREATE TABLE $cot $oracleNoLogging (
 SEQUENCE_ID_A           VARCHAR(40),
 SEQUENCE_ID_B           VARCHAR(40),
 TAXON_ID_A              VARCHAR(40),
 TAXON_ID_B              VARCHAR(40),
 UNNORMALIZED_SCORE      FLOAT,
 NORMALIZED_SCORE        FLOAT
)
";
  runSql($sql);
}

sub createInterTaxonMatchView {
 my $itv = $base->getConfig("interTaxonMatchView");
 my $sql = "
CREATE OR REPLACE VIEW $itv 
	AS SELECT ss.query_id, ss.subject_id, ss.subject_taxon_id, 
	ss.evalue_mant, ss.evalue_exp 
	FROM SimilarSequences ss 
	WHERE ss.subject_taxon_id != ss.query_taxon_id
";
 runSql($sql);
}

sub runSql {
 my $sql = $_[0];
 if ($sqlLog) {
     logSql($sql);
    }
  my $stmt = $dbh->prepare($sql) || croak DBI::errstr . "\n";
  $stmt->execute() || croak DBI::errstr . "\n";
}


sub logSql {
  my $sql = $_[0];
  print LOGFILE "\n$sql";
}

sub missingOK {
    return if $_[0] =~ m/Unknown table/;
    return if $_[0] =~ m/Table .+ doesn't exist/;
    print $_[0];
    print "quitting\n";
    exit 1;
}

sub usage {
 print "
Create OrthoMCL schema in an Oracle or Mysql database.

usage: orthomclInstallSchema config_file sql_log_file

where:
  config_file : see below
  sql_log_file : optional log of sql executed

EXAMPLE: orthomclInstallSchema my_orthomcl_dir/orthomcl.config my_orthomcl_dir/install_schema.log

NOTE: the database login in the config file must have update/insert/truncate privileges on the tables specified in the config file.

Sample Config File:

dbVendor=oracle  (or mysql)
dbConnectString=dbi:Oracle:orthomcl
dbLogin=my_db_login
dbPassword=my_db_password
blastResultsTable=BlastResults
orthologTable=Ortholog
inParalogTable=InParalog
coOrthologTable=CoOrtholog
interTaxonMatchView=InterTaxonMatch

";
 exit(1);
}

