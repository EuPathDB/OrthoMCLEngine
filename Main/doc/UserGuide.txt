OrthoMCL User's Guide
Version ??

===================================================
=========== Introduction ==========================
===================================================

For details on the orthomcl algorithm, please read the OrthoMCL Algorithm Document available here: http://docs.google.com/Doc?id=dd996jxg_1gsqsp6

The input to OrthoMCL is a set of proteomes.

The output is a set of files:
  pairs/
     potentialOrthologs.txt
     potentialCoorthologs.txt
     potentialInparalogs.txt
  groups.txt

The files in the pairs/ directory contain pairwise relationships between proteins, and their scores.  They are categorized into potential orthologs, co-orthologs and inparalogs as described in the OrthoMCL Algorithm Document.  The groups.txt file contains the groups created by clustering the pairs with the MCL program.

There are three overall stages:
  - all-v-all BLAST
  - the OrthoMCL Pairs program -- makes the pairs/ directory
  - the MCL program -- clusters the pairs to make the groups.txt file

These stages are executed in a series of thirteen steps detailed below.  Most simply involve running a provided program.  They are broken into steps for ease of backtracking and recoverability.  Most are very simple to run, so don't be discouraged.


===================================================
========= Requirements ============================
===================================================

(1) UNIX
  - The OrthoMCL Pairs program has only been tested on UNIX
  - The MCL program is only UNIX compatible

(2) BLAST
  - we recommend NCBI BLAST for two reasons
     a) theoretically: XXXXXXX
     b) practically: NCBI BLAST supports a tab delimited output which we provide parsers for.  See Step 7 below.
  - for large datasets (e.g. 1M proteins) all-v-all BLAST will likely require a compute cluster. Otherwise, it could run for weeks or months. 

(3) Relational Database 
  - The OrthoMCL Pairs program runs in a relational database.  Supported vendors are:
     - Oracle
     - MySql
  - If you don't already have one of these installed, you will need to install MySql which should be doable without significant systems administration support.

(4) Perl
  - standard perl
  - DBI libraries

(5) MCL program
  - more details here...

(6) Time
  - As a benchmark, OrthoMCL-DB Version 3 had:
     - 100 genomes (eukaryotes and prokaryotes)
     - 1M protein sequences
     - 500M significant pairwise BLAST matches
  - This set took XXXX days to run all-v-all BLAST on a 200 node compute cluster.  The processing to find pairs took XXXX hours on a XXXX machine and the processing to find groups took XXXX hours.


===================================================
=========== Overview of steps =====================
===================================================

This is an overview of the thirteen steps to run orthomcl.  Details are in the next sections. 

All programs except mysql and mcl are provided as part of the OrthoMCL download.  The provided programs all begin with 'orthomcl' and will print help if called with no arguments.

(1) install or get access to a supported relational database.  If using MySql, a specific installation configuration is required, so it may require installing your own MySql, which is straightforward.

(2) download and install the mcl program according to provided instructions.

(3) install and configure the OrthoMCL suite of programs.

(4) run orthomclInstallSchema to install the required schema into the database

(5) run orthomclAdjustFasta (or your own simple script) to generate protein fasta files in the required format

(6) run orthomclFilterFasta to filter away poor quality proteins, and optionally remove alternative proteins. Creates a single large goodProteins.fasta file (and a poorProteins.fasta file)

(7) run all-v-all NCBI BLAST on goodProteins.fasta (output format is tab delimited text).  We do not provide documentation or support for this step.

(8) run orthomclBlastParser on the NCBI BLAST tab output to create a file of similarities in the required format

(9) run orthomclLoadBlast to load the output of orthomclBlastParser into the database.

(10) run the orthomclPairs program to compute pairwise relationships. 

(11) run the orthomclDumpPairsFiles program to dump the pairs/ directory from the database

(12) run the mcl program on the mcl_input.txt file created in Step 11.

(13) run orthomclMclToGroups to convert mcl output to groups.txt

We recommend you save the output of each step so that you can easily redo it if things go wrong.


===================================================
============ Steps in detail ======================
===================================================

========== Step 1: MySql ============


========== Step 2: install mcl ==========


========== Step 3: install and configure OrthoMCL programs  ========
Input:
  - orthomclSoftware.tar
Output:
  - a directory of executable programs
  - a home directory for your run of orthomcl
  - orthomcl.config file

Use this command to unpack the software:
  tar -xf orthomclSoftware.tar

The result will be the orthomclSoftware/ directory.

The directory contains a set of programs and a sample config file.  To run the programs you will need to either:
  a) include the orthomclSoftware/ directory in your PATH
  b) call the programs using their full directory path

Make a directory to hold the data and results for your run of orthomcl.  In this document we will call that directory "your_orthomcl_dir".

In the orthomclSoftware/ directory is a file called orthomcl.config.sample.  Copy that file to your_orthomcl_dir/orthomcl.config, and edit the new file according to the following instructions.

dbVendor=
  - either 'oracle' or 'mysql'
  - used by orthomclInstallSchema, orthomclLoadBlast, orthomclPairs
dbConnectString=
  - the string required by Perl DBI to find the database.  
  - examples are:
     dbi:Oracle:orthomcl  (for an oracle database with service name 'orthomcl')
     dbi:MySql:orthomcl   (for a mysql server with a database called 'orthomcl')
  - used by orthomclInstallSchema, orthomclLoadBlast, orthomclPairs, orthomclDumpPairsFiles
dbLogin=
  - your database login name
  - used by orthomclInstallSchema, orthomclLoadBlast, orthomclPairs, orthomclDumpPairsFiles
dbPassword=
  - your database password
  - used by orthomclInstallSchema, orthomclLoadBlast, orthomclPairs, orthomclDumpPairsFiles
blastResultsTable=
  - the name to give the table that will be loaded with blast results by orthomclLoadBlast. This is configurable for your flexibility.  It doesn't matter what you call it. 
  - used by orthomclInstallSchema, orthomclLoadBlast, orthomclPairs
orthologTable=
  - the name of the table that will hold potential ortholog pairs.  This is configurable so that you can run orthomclPairs multiple times, and compare results.
  - used by orthomclInstallSchema, orthomclPairs, orthomclDumpPairsFiles
inParalogTable=InParalog
  - the name of the table that will hold potential inparalog pairs.  This is configurable so that you can run orthomclPairs multiple times, and compare results.
  - used by orthomclInstallSchema, orthomclPairs, orthomclDumpPairsFiles
coOrthologTable=CoOrtholog
  - the name of the table that will hold potential coortholog pairs.  This is configurable so that you can run orthomclPairs multiple times, and compare results.
  - used by orthomclInstallSchema, orthomclPairs, orthomclDumpPairsFiles
interTaxonMatchView=InterTaxonMatch
percentMatchCutoff=
  - blast similarities with percent match less than this value are ignored.
  - used by orthomclPairs
evalueExponentCutoff=
  - blast similarities with evalue Exponents greather than this value are ignored.
  - used by orthomclPairs


========== Step 4: orthomclInstallSchema ========
Input:
  - database
Output:
  - database with schema installed

Run the orthmclInstallSchema program to install the schema.


========== Step 5: orthomclAdjustFasta ==========
Input: 
  - fasta files as acquired from the genome resource.
Output:
  - the your_orthomcl_dir/input directory of orthomcl-compliant fasta files (see Step 6)

Use orthomclAdjustFasta to produce a compliant file from any input file that conforms to the following pattern (for other files, provide your own script to produce complaint fasta files):
  - has one or more fields that are separated by white space or the '|' character (optionally surrounded by white space)
  - has the unique ID in the same field of every protein.

First, for any organism that has multiple protein fasta files, combine them all into one single proteome fasta file

Then, create an empty your_orthomcl_dir/input directory, and change to that directory.  Run orthomclAdjustFasta once for each input proteome fasta file.  It will produce a compliant file in the new directory.  Check each file to ensure that the proteins all have proper IDs.


======== Step 6: orthomclFilterFasta ===========
Input: 
  - the your_orthomcl_dir/input directory
  - optionally a gene->protein mapping file
Output:
  - your_orthomcl_dir/goodProteins.fasta
  - your_orthomcl_dir/poorProteins.fasta
  - a report of suspicious proteomes (> 10% rejects)

This step produces a single goodProteins.fasta file to run BLAST on.  It filters away poor-quality sequences (placing them in poorProteins.fasta).  The filter is based on length and percent stop codons.  You can adjust these values.

The input requirements are:
  1) an input/ directory which contains all and only the proteome .fasta files, one file per proteome.
  1) each .fasta file must have a name in the form 'xxxx.fasta' where xxxx is a three or four letter unique taxon code.  For example: hsa.fasta or eco.fasta
  2) each protein in those files must have a definition line in the following format:
     >xxxx|yyyyyyyy
     where xxxx is the three or four letter taxon code and yyyyyyy is a sequence identifier unique within that taxon.

Change dir to your_orthomcl_dir and run orthomclFilterFasta, passing it the input/ directory. It should run in a few minutes.

After this step is complete you can delete the input/ directory to save disk space.
 

========= Step 7: All-v-all BLAST =========
Input:
  - goodProteins.fasta
Output:
  - your_blast_results_in_tab_format

You must run your own BLAST.  For large datasets you should consider gaining access to a compute cluster.  (For 1 million sequences we ran on a 200 node cluster and it took XXXX days).

We expect you to:
  - use NCBI BLAST (XXXX reasons....)
  - run with the -m 8 option to provide tab delimited output required by Step 8
  - see the OrthoMCL Algorithm Document for important details about other BLAST arguments

If you are a power user you can deviate from this, so long as you can ultimately provide output in exactly the format provided by NCBI BLAST using the -m 8 option, and expected by Step 8.

If you are a super-power user you can deviate from that, and also skip Step 8.   But you must be able to provide the exact format file created by that step as expected by Step 9.  The tricky part is computing percent match.  


========= Step 8: orthomclBlastParser ========
Input:
  - your_blast_results_in_tab_format
Output:
  - similarSequences.txt

This step parses NCBI BLAST -m 8 output into the format that can be loaded into the orthomcl database. 

Use the orthomclBlastParser program for this.  It will run in XXXXX.  In addition to formatting, it computes the percent match of each hit, which is tricky (see the perl code if you are a super-power user.)


========= Step 9: orthomclLoadBlast  ===========
Input:
  - similarSequences.txt
Output:
  - SimilarSequences table in the database

This step loads the BLAST results into the orthomcl database. 

Use the orthomclLoadBlast program for this.  It may take many hours to run (15 hours for 500M similarities).


========= Step 10: orthomclPairs =========
Input:
  - SimilarSequences table in the database
Output:
  - PotentialOrthologs table
  - PotentialInParalogs table
  - PotentialCoOrthologs table

This is a computationally major step that finds protein pairs.  It executes the algorithm described in the OrthoMCL Algorithm Document, using a relational database.  The program proceeds through a series of internal steps, each creating an intermediate database table or index.  There are about 20 such tables created. Finally, it populates the output tables.

Use the orthomclPairs program for this step.  On a set of 500M protein similarities, it took XXXX hours to run.

The cleanup= option allows you to control the cleaning up of the intermediary tables.  The 'yes' option drops the intermediary tables once they are no longer needed.  The 'no' option keeps the intermediary tables in the database.  In total, they are expected to be about XXXX percent of the SimilarSequences table. This is useful mostly for power users or developers. They can be removed afterwards with the 'only' or 'all' options.  The latter also removes the final tables, and should only be done after Step 11 below has dumped them to files.

The startAfter= option allows you to pick up where the program left off, if it stops for any reason.  Look in the log to find the last completed step, and use its tag as the value for startAfter=

========== Step 11: orthomclDumpPairsFiles ========
Input:
  - database with populated pairs tables
Output
  - pairs/ directory
  - orthomclMclInput file

Run the orthomclDumpPairsFiles

========== Step 12: mcl ========


========== Step 13: orthomclMclToGroups ==========



    

